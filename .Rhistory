plot(NA, xlim = c(0, 3), ylim = c(0, 0.8), frame.plot=F,
xlab = "Year", ylab = "PfPr")
segments(x0 = 2, y0 = target_pfpr, x1 = 3, y1 = target_pfpr, col = "red", lwd = 4)
lines(calibrated_prev ~ year)
# Write our summary function. To match the target we need to
# output average PfPr in year 3
get_pfpr_year <- function(simulation_output){
year1 <- simulation_output[simulation_output$timestep < 1 * 365,]
year2 <- simulation_output[simulation_output$timestep > 1 * 365 & simulation_output$timestep < 2 * 365,]
year3 <- simulation_output[simulation_output$timestep > 2 * 365,]
pfpr1 <- year1$n_detect_730_3650 / year1$n_730_3650
pfpr2 <- year2$n_detect_730_3650 / year2$n_730_3650
pfpr3 <- year3$n_detect_730_3650 / year3$n_730_3650
average_pfpr1 <- mean(pfpr1)
average_pfpr2 <- mean(pfpr2)
average_pfpr3 <- mean(pfpr3)
return(average_pfpr1, average_pfpr2, average_pfpr3)
}
# Does this look right? Does it match the type of target data?
get_pfpr_year(simulation)
# Write our summary function. To match the target we need to
# output average PfPr in year 3
get_pfpr_year <- function(simulation_output){
year1 <- simulation_output[simulation_output$timestep < 1 * 365,]
year2 <- simulation_output[simulation_output$timestep > 1 * 365 & simulation_output$timestep < 2 * 365,]
year3 <- simulation_output[simulation_output$timestep > 2 * 365,]
pfpr1 <- year1$n_detect_730_3650 / year1$n_730_3650
pfpr2 <- year2$n_detect_730_3650 / year2$n_730_3650
pfpr3 <- year3$n_detect_730_3650 / year3$n_730_3650
average_pfpr1 <- mean(pfpr1)
average_pfpr2 <- mean(pfpr2)
average_pfpr3 <- mean(pfpr3)
return(c(average_pfpr1, average_pfpr2, average_pfpr3))
}
# Does this look right? Does it match the type of target data?
get_pfpr_year(simulation)
# Write our summary function. To match the target we need to
# output average PfPr in year 3
get_pfpr_year <- function(simulation_output){
year1 <- simulation_output[simulation_output$timestep < 1 * 365,]
year2 <- simulation_output[simulation_output$timestep[366:730],]
year3 <- simulation_output[simulation_output$timestep > 2 * 365,]
pfpr1 <- year1$n_detect_730_3650 / year1$n_730_3650
pfpr2 <- year2$n_detect_730_3650 / year2$n_730_3650
pfpr3 <- year3$n_detect_730_3650 / year3$n_730_3650
average_pfpr1 <- mean(pfpr1)
average_pfpr2 <- mean(pfpr2)
average_pfpr3 <- mean(pfpr3)
return(c(average_pfpr1, average_pfpr2, average_pfpr3))
}
# Does this look right? Does it match the type of target data?
get_pfpr_year(simulation)
# Run a test simulation to check our target function does what it should!
simulation <- malariasimulation::run_simulation(
timesteps = p$timesteps,
parameters = p
)
# Does this look right? Does it match the type of target data?
get_pfpr_year(simulation)
# Run a test simulation to check our target function does what it should!
simulation <- malariasimulation::run_simulation(
timesteps = p$timesteps,
parameters = p
)
# Does this look right? Does it match the type of target data?
get_pfpr_year(simulation)
calibration <- cali::calibrate(target = target_pfpr,
summary_function = get_pfpr_year,
parameters = p,
tolerance = 0.005,
low = 1, high = 10)
# Define our target. In this example we have a PfPr estimate for year 3
target_pfpr <- c(0.4,0.3,0.2)
calibration <- cali::calibrate(target = target_pfpr,
summary_function = get_pfpr_year,
parameters = p,
tolerance = 0.005,
low = 1, high = 10)
# Set the initial EIR (!!! Add your calibrated estimate here !!!)
calibrated_p <- calibrated_p |>
malariasimulation::set_equilibrium(init_EIR = calibration)
calibrated_simulation <- malariasimulation::run_simulation(
timesteps = calibrated_p$timesteps,
parameters = calibrated_p
)
calibrated_prev <- calibrated_simulation$n_detect_730_3650 / calibrated_simulation$n_730_3650
year <- calibrated_simulation$timestep / 365
plot(NA, xlim = c(0, 3), ylim = c(0, 0.8), frame.plot=F,
xlab = "Year", ylab = "PfPr")
segments(x0 = 2, y0 = target_pfpr, x1 = 3, y1 = target_pfpr, col = "red", lwd = 4)
line(0, target_pfpr[1], col="red")
line(0, target_pfpr[1], 1, target_pfpr[1], col="red")
line(0, target_pfpr[1], 1, target_pfpr[1])
lines(0, target_pfpr[1], 1, target_pfpr[1], col="red")
plot(NA, xlim = c(0, 3), ylim = c(0, 0.8), frame.plot=F,
xlab = "Year", ylab = "PfPr")
segments(x0 = 2, y0 = target_pfpr[3], x1 = 3, y1 = target_pfpr[3], col = "red", lwd = 4)
segments(x0 = 0, y0 = target_pfpr[1], x1 = 1, y1 = target_pfpr[1], col = "red", lwd = 4)
segments(x0 = 1, y0 = target_pfpr[2], x1 = 2, y1 = target_pfpr[2], col = "red", lwd = 4)
lines(calibrated_prev ~ year)
target_pfpr
# Does this look right? Does it match the type of target data?
get_pfpr_year_3(simulation)
?calibrate
#### Third excercise
mvw::run_tutorial("Bednet")
library(netz)
# Fit
fit <- netz::fit_usage(
target_usage = c(.12, .18, .45, .50, .40),
target_usage_timesteps = 365 * c(1, 3, 5, 7, 9) - 132,
distribution_timesteps = 365 * c(1, 2, 4, 7, 8)
)
round(fit$par, 2)
365 * c(1, 3, 5, 7, 9) - 132
floor((c(1, 3, 5, 7, 9) - 0.5) * year)
floor((c(1, 3, 5, 7, 9) - 0.5) * year)
(c(1, 3, 5, 7, 9) - 0.5) * year)
(c(1, 3, 5, 7, 9) - 0.5) * year
(c(1, 3, 5, 7, 9) - 0.5)
(c(1, 3, 5, 7, 9) - 0.5) *365
365 * c(1, 3, 5, 7, 9) - 132
365 * c(1, 3, 5, 7, 9) - 182
# Fit
fit <- netz::fit_usage(
target_usage = c(.12, .18, .45, .50, .40),
target_usage_timesteps = 365 * c(1, 3, 5, 7, 9) - 182,
distribution_timesteps = 365 * c(1, 2, 4, 7, 8)
)
round(fit$par, 2)
# Fit
fit <- netz::fit_usage(
target_usage = c(.12, .18, .45, .50, .40),
target_usage_timesteps = 365 * c(1, 3, 5, 7, 9) - 182,
distribution_timesteps = 365 * c(1, 2, 4, 7, 8)
)
round(fit$par, 2)
# Fit
fit <- netz::fit_usage(
target_usage = c(.12, .18, .45, .50, .40),
target_usage_timesteps = 365 * c(1, 3, 5, 7, 9) - 182,
distribution_timesteps = 365 * c(0, 1, 3, 6, 7) +1
)
round(fit$par, 2)
fitted_input <- round(fit$par, 2)
netz::population_usage(
timesteps = 365 * 10,
distribution = c(.12, .18, .45, .50, .40),
distribution_timesteps = 365 * c(0, 1, 3, 6, 7) +1,
half_life = 365 * 5
)
out <- netz::population_usage(
timesteps = 365 * 10,
distribution = c(.12, .18, .45, .50, .40),
distribution_timesteps = 365 * c(0, 1, 3, 6, 7) +1,
half_life = 365 * 5
)
plot(1:(10**365), out, t = "l", ylim = c(0, 0.8), ylab = "Population usage", xlab = "Time")
plot(1:(10*365), out, t = "l", ylim = c(0, 0.8), ylab = "Population usage", xlab = "Time")
points(c(.12, .18, .45, .50, .40) ~ 365 * c(0, 1, 3, 6, 7) +1, col = "dodgerblue", pch = 19)
points(c(.12, .18, .45, .50, .40) ~ (365 * c(0, 1, 3, 6, 7) +1), col = "dodgerblue", pch = 19)
target <- c(.12, .18, .45, .50, .40)
target_tt <- 365 * c(1, 3, 5, 7, 9) - 182
points(target ~ target_tt, col = "dodgerblue", pch = 19)
# Our estimates of the distributions
fitted_input <- c(0.13, 0.15, 0.53, 0.33, 0.16)
year <- 365
timesteps <- 10 * year
net_hl <- 5 * year
# Target usage associated time points
target <- c(0.12, 0.18, 0.45, 0.50, 0.40)
target_tt <- floor((c(1, 3, 5, 7, 9) - 0.5) * year)
# Time points at which distribution will occur
distribution_tt <- 1 + c(0, 1, 3, 6, 7) * year
# Estimate population usage over time
pu <- population_usage(
timesteps = timesteps,
distribution = fitted_input,
distribution_timesteps = distribution_tt,
half_life = net_hl)
# Plot the results against the target
plot(1:timesteps, pu, t = "l", ylim = c(0, 0.8), ylab = "Population usage", xlab = "Time")
points(target ~ target_tt, col = "dodgerblue", pch = 19)
nigeria <- NGA
names(nigeria)
nigeria$interventions
?usage_rate
?netz::usage_rate
get_usage_rate_data()
get_usage_rate_data(iso=="NGA")
netz::access_to_usage()
netz::access_to_usage(access=0.62)
get_usage_rate_data()[1,3]
get_usage_rate_data()[[1]]
which(get_usage_rate_data()[[1]]=="NGA")
get_usage_rate_data()[[2]]
get_usage_rate_data()[[2]][which(get_usage_rate_data()[[1]]=="NGA")]
netz::access_to_usage(access=0.62, 0.8795)
get_usage_rate_data()[[2]][which(get_usage_rate_data()[[1]]=="BFA")]
netz::access_to_usage(access=0.62, 0.8931)
which(get_usage_rate_data()[[2]]==max())
max(get_usage_rate_data()[[2]])
max(get_usage_rate_data()[[2]], index.return=T)
get_usage_rate_data()
usage_to_access()
usage_to_access(usage=0.7)
usage_to_access(usage=0.7, use_rate=0.8)
access_to_crop()
access_to_crop(access=usage_to_access(usage=0.7, use_rate=0.8), )
access_to_crop(access=usage_to_access(usage=0.7, use_rate=0.8))
crop_to_distribution()
crop_to_distribution(crop=access_to_crop(access=usage_to_access(usage=0.7, use_rate=0.8)),
distribution_freq = 1*365, half_life=2.5*365)
crop_to_distribution(crop=access_to_crop(access=usage_to_access(usage=0.7, use_rate=0.8)),
distribution_freq = 1*365, half_life=2.5*365, netz::net_loss_map)
crop_to_distribution(crop=access_to_crop(access=usage_to_access(usage=0.7, use_rate=0.8)),
distribution_freq = 1*365, half_life=2.5*365)
crop_to_distribution(crop=access_to_crop(access=usage_to_access(usage=0.7, use_rate=0.8)),
distribution_freq = 1*365, half_life=2.5*365, net_loss_function = net_loss_map())
crop_to_distribution(crop=access_to_crop(access=usage_to_access(usage=0.7, use_rate=0.8)),
distribution_freq = 1*365, half_life=2.5*365, net_loss_function = net_loss_map())
crop_to_distribution(crop=access_to_crop(access=usage_to_access(usage=0.7, use_rate=0.8)),
distribution_freq = 1*365, half_life=2.5*365, net_loss_function = net_loss_map)
crop_to_distribution(crop=access_to_crop(access=usage_to_access(usage=0.7, use_rate=0.8)),
distribution_freq = 1*365, half_life=2.5*365, net_loss_function = net_loss_map) * 5 * 10000
u <- seq(0,1,0.01)
d <- 0.3
b <- 0.6
f <- u*(d+u)/(b*d+u*(d+u))
plot(f, u, type="l", frame.plot = F, xlim=c(0,0.6), ylim=c(0,0.5), lwd=2,
xlab="Dyed fraction", ylab="Feeding rate")
approx(f, u, xout = 0.35)
u <- seq(0,1,0.01)
r <- 1/4.5
d <- 0.1
b <- 0.3
f <- u*(d+u)/((b+r)*(d+r)+u*(d+u))
plot(f, u, type="l", frame.plot = F, xlim=c(0,0.6), ylim=c(0,0.5), lwd=2,
xlab="Dyed fraction", ylab="Feeding rate")
a <- -2.058
c <- 2.27
f <- a*u^2 + c*u
lines(f, u, type="l", xlim=c(0,0.6), ylim=c(0,0.5), lwd=2,
xlab="Dyed fraction", ylab="Feeding rate", col=2)
approx(f, u, xout = 0.35)
u <- seq(0,1,0.01)
d <- 0.3
b <- 0.6
f <- u*(d+u)/(b*d+u*(d+u))
plot(f, u, type="l", frame.plot = F, xlim=c(0,0.6), ylim=c(0,0.5), lwd=2,
xlab="Dyed fraction", ylab="Feeding rate")
a <- -2.058
c <- 2.27
f <- a*u^2 + c*u
lines(f, u, type="l", xlim=c(0,0.6), ylim=c(0,0.5), lwd=2,
xlab="Dyed fraction", ylab="Feeding rate", col=2)
u <- seq(0,1,0.01)
d <- 0.1
b <- 0.1
f <- u*(d+u)/(b*d+u*(d+u))
plot(f, u, type="l", frame.plot = F, xlim=c(0,0.6), ylim=c(0,0.5), lwd=2,
xlab="Dyed fraction", ylab="Feeding rate")
approx(f, u, xout = 0.35)
b <- 0.2
f <- u*(d+u)/(b*d+u*(d+u))
plot(f, u, type="l", frame.plot = F, xlim=c(0,0.6), ylim=c(0,0.5), lwd=2,
xlab="Dyed fraction", ylab="Feeding rate")
b <- 0.3
f <- u*(d+u)/(b*d+u*(d+u))
plot(f, u, type="l", frame.plot = F, xlim=c(0,0.6), ylim=c(0,0.5), lwd=2,
xlab="Dyed fraction", ylab="Feeding rate")
a <- -2.058
c <- 2.27
f <- a*u^2 + c*u
lines(f, u, type="l", xlim=c(0,0.6), ylim=c(0,0.5), lwd=2,
xlab="Dyed fraction", ylab="Feeding rate", col=2)
a <- -3.051
c <- 3.010
f <- a*u^2 + c*u
lines(f, u, type="l", xlim=c(0,0.6), ylim=c(0,0.5), lwd=2,
xlab="Dyed fraction", ylab="Feeding rate", col=2)
u <- seq(0,1,0.01)
d <- 0.1
b <- 0.3
f <- u*(d+u)/(b*d+u*(d+u))
plot(f, u, type="l", frame.plot = F, xlim=c(0,0.6), ylim=c(0,0.5), lwd=2,
xlab="Dyed fraction", ylab="Feeding rate")
a <- -3.051
c <- 3.010
f <- a*u^2 + c*u
lines(f, u, type="l", xlim=c(0,0.6), ylim=c(0,0.5), lwd=2,
xlab="Dyed fraction", ylab="Feeding rate", col=2)
a <- -1.595
c <- 1.824
f <- a*u^2 + c*u
lines(f, u, type="l", xlim=c(0,0.6), ylim=c(0,0.5), lwd=2,
xlab="Dyed fraction", ylab="Feeding rate", col=2)
a <- -1.489
c <- 2.009
f <- a*u^2 + c*u
lines(f, u, type="l", xlim=c(0,0.6), ylim=c(0,0.5), lwd=2,
xlab="Dyed fraction", ylab="Feeding rate", col=2)
u <- seq(0,1,0.01)
r <- 1/4.5
d <- 0.1
b <- 0.1
f <- u*(d+u)/((b+r)*(d+r)+u*(d+u))
plot(f, u, type="l", frame.plot = F, xlim=c(0,0.6), ylim=c(0,0.5), lwd=2,
xlab="Dyed fraction", ylab="Feeding rate")
a <- -3.051
c <- 3.01
f <- a*u^2 + c*u
lines(f, u, type="l", xlim=c(0,0.6), ylim=c(0,0.5), lwd=2,
xlab="Dyed fraction", ylab="Feeding rate", col=2)
a <- -1.595
c <- 1.824
f <- a*u^2 + c*u
lines(f, u, type="l", xlim=c(0,0.6), ylim=c(0,0.5), lwd=2,
xlab="Dyed fraction", ylab="Feeding rate", col=2)
sessionInfo()
options()
nc_data_2 <- nc_open("~/Documents/GitHub/c_gls_FCOVER_201606230000_GLOBE_PROBAV_V1.5.1.nc")
library(ncdf4)
library(raster)
library(rgdal)
library(ggplot2)
library(RColorBrewer)
library(lattice)
nc_data_2 <- nc_open("~/Documents/GitHub/c_gls_FCOVER_201606230000_GLOBE_PROBAV_V1.5.1.nc")
View(nc_data_2)
fcover.array[fcover.array == fillvalue$value] <- NA
lon <- ncvar_get(nc_data_2, "lon")
lat <- ncvar_get(nc_data_2, "lat", verbose = F)
t <- ncvar_get(nc_data_2, "time")
fcover.array <- ncvar_get(nc_data_2, 'FCOVER') # store the data in a 3-dimensional array
fcover.array[fcover.array == fillvalue$value] <- NA
fillvalue <- ncatt_get(nc_data_2, "FCOVER", "_FillValue")
View(fillvalue)
fcover.array[fcover.array == fillvalue$value] <- NA
dim(fcover.array)
length(na.omit(as.vector(crs.array)))
length(na.omit(as.vector(fcover.array)))
nc_close()
nc_close(nc_data_2)
r <- raster(t(fcover.array), xmn=min(lon), xmx=max(lon), ymn=min(lat),
ymx=max(lat), crs=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs+ towgs84=0,0,0"))
View(r)
plot(r)
4+3
plot(r)
View(r)
extract(r, SpatialPoints(cbind(-12.565, 8.923)), method = 'simple')
plot(r)
plot(r)
plot(r)
getOption('device')
dev.new()
plot(r)
dev.off()
plot(r)
gc()
GDALinfo("~/Documents/GitHub/MOD13A2.A2016353.h16v07.061.2021363143829.hdf")
install.packages('gdalUtils')
library(gdalutils)
install.packages('stars')
library(stars)
filename = "~/Documents/GitHub/MOD13A2.A2016353.h16v07.061.2021363143829.hdf"
sd <- gdal_subdatasets(filename)
sd
r <- read_stars(sd)
r <- read_stars(filename)
read_stars("~/Documents/GitHub/MOD13A2.A2016353.h16v07.061.2021363143829.hdf")
read_stars("~/Documents/GitHub/MOD13A2.A2016097.h17v08.061.2021348033000.hdf")
sessionInfo()
setwd("~/Documents/GitHub/")
library(devtools)
install_github("nmoghaddas19/malariasimulation")
# load in packages
library(malariasimulation)
library(ICDMM)
install_github("mrc-ide/odin")
library(site)
options(repos = c(
mrcide = "https://mrc-ide.r-universe.dev",
CRAN = "https://cloud.r-project.org"))
library(devtools)
install.packages("drat")
library(drat)
remotes::install_github("mrc-ide/mvw")
library(mvw)
library(learnr)
install.packages("htmltools")
library(htmltools)
drat::addRepo("malariaverse", "file:\\\\projects.dide.ic.ac.uk/malaria/malariaverse/drat")
install.packages("foresite", type = "source")
library(foresite)
library(site)
library(foresite)
library(lubridate)
library(RColorBrewer)
library(lme4)
library(dplyr)
library(cali)
library(umbrella)
install.packages("umbrella")
install_github("mrc-ide/umbrella")
library(netz)
library(ggplot2)
# functions
jensen.logit.adjust <-
function(p, V, method = "mcculloch", inverse = FALSE) {
if(method == "mcculloch" & inverse) {
method <- "zeger"
warning("The McCulloch method can't be used when inverse = TRUE. Changing to Zeger.")
}
stopifnot(!(method == "mcculloch" & inverse))
Beta <- qlogis(p)
if(method == "mcculloch") {
return(plogis(Beta - 0.5 * V * tanh(Beta * (1 + 2 * exp(-0.5 * V))/6)))
}
if(method == "zeger") {
if (inverse) {
plogis(Beta * sqrt(256 * V / (75 * pi^2) + 1))
} else {
plogis(Beta/sqrt(1 + ((16 * sqrt(3))/(15 * pi))^2 * V))
}
}
}
dyed_fraction <- read.csv("~/Documents/GitHub/atsb_working_code/dyed_fraction.csv")[1:200,]
par(las=1)
plot(NA, ylim=c(0,0.7), xlim=c(0,0.5), frame.plot=F, ylab = "Dyed fraction",
xlab = "Daily feeding rate")
grid()
for (i in 1:nrow(dyed_fraction)) {
lines(seq(0.01,0.5,0.02), dyed_fraction[i,7:31],
col=adjustcolor(col="mediumseagreen", alpha.f = 0.4))
}
setwd("atsb_working_code/")
# load in data
dat.all <- read.csv("atsb_working_code/ZAM.ASB.Target Summaries.2021.10.01.clean.csv")
# load in data
dat.all <- read.csv("/ZAM.ASB.Target Summaries.2021.10.01.clean.csv")
# load in data
dat.all <- read.csv("ZAM.ASB.Target Summaries.2021.10.01.clean.csv")
# cleaning and checking ####
names(dat.all) <- tolower(names(dat.all))
dim(dat.all)
table(table(dat.all$form.sampleid.check))
dat.all <- dat.all[!duplicated(dat.all$form.sampleid.check), ]
table(table(dat.all$form.sampleid.check))
dat.all$mosquito_species[dat.all$an..gambiae %in% 1] <- "gambiae" # make species a variable
dat.all$mosquito_species[dat.all$an..funestus %in% 1] <- "funestus" # make species a variable
dat.all$mosquito_species <- factor(dat.all$mosquito_species) # make species a factor
dat.all$location <- factor(dat.all$indoor, 0:1, c("Outdoors", "Indoors")) # make location a factor
dat.all$anoph_sex <- factor(dat.all$male, 0:1, c("female", "male")) # make sex a factor
dat.all$n.asb <- dat.all$asbs.deployed
table(dat.all$n.asb, exclude = NULL)
dat.all$date.id <- as.Date(dat.all$day.of.date.trap, "%d-%b-%y")
dat.all$month_caught <- factor(month(dat.all$date.id))
dat.all$collection_date <- factor(dat.all$date.id)
dat.all$cluster[dat.all$phase == 1 & dat.all$n.asb == 2] <-
paste0(dat.all$cluster[dat.all$phase == 1 & dat.all$n.asb == 2], ".23")
dat.all$cluster[dat.all$phase == 2 & dat.all$n.asb == 3] <-
paste0(dat.all$cluster[dat.all$phase == 2 & dat.all$n.asb == 3], ".23")
dat.all$cluster[dat.all$phase == 1 & dat.all$n.asb == 3] <-
paste0(dat.all$cluster[dat.all$phase == 1 & dat.all$n.asb == 3], ".32")
dat.all$cluster[dat.all$phase == 2 & dat.all$n.asb == 2] <-
paste0(dat.all$cluster[dat.all$phase == 2 & dat.all$n.asb == 2], ".32")
dat.all$an..gambiae <- dat.all$an..funestus <- dat.all$indoor <- dat.all$outdoor <-
dat.all$male <- dat.all$female <- dat.all$asbs.deployed <-
dat.all$day.of.date.trap <- dat.all$cluster.code <- NULL
sum(is.na(dat.all))
colSums(is.na(dat.all))
table(dat.all$form.bloodfed, exclude = NULL)
dat.all <-
dat.all[dat.all$mosquito_species %in% c("gambiae", "funestus") &
dat.all$anoph_sex %in% "female", ]
table(dat.all$cluster)
table(dat.all$mosquito_species, exclude = NULL)
table(dat.all$collection_method, exclude = NULL)
table(dat.all$anoph_sex, exclude = NULL)
range(dat.all$date.id)
tapply(dat.all$date.id, dat.all$phase, range)
table(dat.all$cluster, dat.all$n.asb)
table(dat.all$cluster, dat.all$n.asb, dat.all$phase)
dat.all <-
dat.all[order(dat.all$n.asb, dat.all$cluster, dat.all$collection_date,
dat.all$mosquito_species, dat.all$location), ]
dat.all$cluster <- factor(dat.all$cluster, unique(dat.all$cluster))
dat.all$n.asb <- factor(dat.all$n.asb, 2:3, c("2 stations", "3 stations"))
dat.all$hh <- factor(dat.all$form.collectionid.check)
dat.all$form.collectionid.check <- NULL
table(form.bloodfed = dat.all$form.bloodfed, form.dyefed = dat.all$form.dyefed,
exclude = NULL)
prop.table(table(form.bloodfed = dat.all$form.bloodfed,
form.dyefed = dat.all$form.dyefed, exclude = NULL))
dat.all$positive <- dat.all$form.dyefed
dat.all$form.dyefed <- NULL
dat.all$cluster.day <- factor(paste(dat.all$cluster, dat.all$date.id, sep = ":"))
write.csv(dat.all, "zambia_asb_data")
# read in the dyed fraction data
zambia <- read.csv("~/Documents/GitHub/atsb_working_code/zambia_asb_data")
View(zambia)
mali <- read.csv("~/Documents/GitHub/atsb_working_code/DB monthly natural sugar and ASB feeding/day 2-Table 1.csv")[-(64:65),1:16]
mali$dyed_fraction <- mali$females.ASB.positive/mali$TOTAL.Sample.females.Day.2
mali$total_asb_positive <- mali$females.ASB.positive
mali$total_sampled <- mali$TOTAL.Sample.females.Day.2
mali$total_catch <- mali$CDC.total.females.day.2
mali$days <- (mali$month-1)*30+mali$Day
write.csv(mali, "mali_asb_data")
mali <- read.csv("~/Documents/GitHub/atsb_working_code/mali_asb_data")
View(mali)
